services:
  redis-user-service:
    image: redis:alpine
    ports:
      - "${REDIS_USER_SERVICE_PORT}:${REDIS_USER_SERVICE_PORT}"

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    environment:
      - ENVIRONMENT=${APP_ENV}
      - PORT=${USER_SERVICE_PORT}
      - MONGO_URI=mongodb+srv://${USER_SERVICE_DB_USER}:${USER_SERVICE_DB_PASSWORD}@${USER_SERVICE_DB_CLUSTER}.dvnme.mongodb.net/${USER_SERVICE_DB_NAME}?retryWrites=true&w=majority
      - DB_NAME=${USER_SERVICE_DB_NAME}
      - DB_LOGGER_COLLECTION=${USER_SERVICE_DB_LOGGER_COLLECTION}
      - JWT_SECRET=${USER_SERVICE_JWT_SECRET}
      - REDIS_URI=redis://redis-user-service:${REDIS_USER_SERVICE_PORT}
    volumes:
      - ./user-service/:/app/
    restart: always
    depends_on:
      - redis-user-service
    deploy:
      replicas: 1

  products-service:
    build: 
      context: ./products-service
      dockerfile: Dockerfile
    ports:
      - "${PRODUCT_SERVICE_PORT}:${PRODUCT_SERVICE_PORT}"
    environment:
      - PORT=${PRODUCT_SERVICE_PORT}
      - MONGO_URI=mongodb+srv://${PRODUCT_SERVICE_DB_USER}:${PRODUCT_SERVICE_DB_PASSWORD}@${PRODUCT_SERVICE_DB_CLUSTER}.dvnme.mongodb.net/${PRODUCT_SERVICE_DB_NAME}?retryWrites=true&w=majority
      - DB_NAME=${PRODUCT_SERVICE_DB_NAME}
      - DB_COLLECTION=${PRODUCT_SERVICE_DB_COLLECTION}
      - DB_LOGGER_COLLECTION=${PRODUCT_SERVICE_DB_LOGGER_COLLECTION}
    volumes:
      - ./products-service/:/app/
    restart: always
    deploy:
      replicas: 1

  graphql-service:
    build:
      context: ./graphql-service
      dockerfile: Dockerfile
    ports:
      - "${GRAPHQL_SERVICE_PORT}:${GRAPHQL_SERVICE_PORT}"
    environment:
      - PORT=${GRAPHQL_SERVICE_PORT}
      - SOURCE_OF_TRUTH=${GRAPHQL_SERVICE_SOURCE_OF_TRUTH}
    volumes:
      - ./graphql-service/:/app/
    restart: always
    deploy:
      replicas: 1

  frontend-service:
    build: 
      context: ./frontend-service
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_SERVICE_PORT}:${FRONTEND_SERVICE_PORT}"
    environment:
      - PORT=${FRONTEND_SERVICE_PORT}
    volumes:
      - ./frontend-service/:/app/
    restart: always
    deploy:
      replicas: 1